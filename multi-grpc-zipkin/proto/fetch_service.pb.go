// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fetch_service.proto

/*
Package grpcservice is a generated protocol buffer package.

It is generated from these files:
	fetch_service.proto

It has these top-level messages:
	FetchRequest
	FetchResponse
*/
package grpcservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchRequest struct {
	Name string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ids  []int64 `protobuf:"varint,2,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FetchRequest) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type FetchResponse struct {
	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *FetchResponse) Reset()                    { *m = FetchResponse{} }
func (m *FetchResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchResponse) ProtoMessage()               {}
func (*FetchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchResponse) GetResults() []string {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*FetchRequest)(nil), "grpcservice.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "grpcservice.FetchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FetchService service

type FetchServiceClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
}

type fetchServiceClient struct {
	cc *grpc.ClientConn
}

func NewFetchServiceClient(cc *grpc.ClientConn) FetchServiceClient {
	return &fetchServiceClient{cc}
}

func (c *fetchServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := grpc.Invoke(ctx, "/grpcservice.FetchService/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FetchService service

type FetchServiceServer interface {
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
}

func RegisterFetchServiceServer(s *grpc.Server, srv FetchServiceServer) {
	s.RegisterService(&_FetchService_serviceDesc, srv)
}

func _FetchService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcservice.FetchService/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FetchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcservice.FetchService",
	HandlerType: (*FetchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _FetchService_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fetch_service.proto",
}

func init() { proto.RegisterFile("fetch_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x4b, 0x2d, 0x49,
	0xce, 0x88, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4e, 0x2f, 0x2a, 0x48, 0x86, 0x0a, 0x29, 0x99, 0x70, 0xf1, 0xb8, 0x81, 0xd4, 0x04, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42, 0x02, 0x5c, 0xcc, 0x99, 0x29, 0xc5, 0x12, 0x4c, 0x0a,
	0xcc, 0x1a, 0xcc, 0x41, 0x20, 0xa6, 0x92, 0x26, 0x17, 0x2f, 0x54, 0x57, 0x71, 0x41, 0x7e, 0x5e,
	0x71, 0xaa, 0x90, 0x04, 0x17, 0x7b, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x49, 0xb1, 0x04, 0xa3, 0x02,
	0xb3, 0x06, 0x67, 0x10, 0x8c, 0x6b, 0x14, 0x00, 0xb5, 0x20, 0x18, 0x62, 0xa1, 0x90, 0x03, 0x17,
	0x2b, 0x98, 0x2f, 0x24, 0xa9, 0x87, 0xe4, 0x0e, 0x3d, 0x64, 0x47, 0x48, 0x49, 0x61, 0x93, 0x82,
	0xd8, 0xa4, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x86, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x44, 0x11,
	0x3f, 0x61, 0xdd, 0x00, 0x00, 0x00,
}
